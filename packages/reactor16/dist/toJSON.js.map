{"version":3,"sources":["../src/toJSON.js"],"names":["Children","toJSON","component","element","_currentElement","renderedChildren","_renderedChildren","props","children","jsonChildren","map","child","key","getHostComponentFromComposite","object","type","name","includeSerializable","Object","defineProperty","value","obj","Array","isArray","result","item","jsonItem","undefined","push","constructor","$className","inst","_renderedNodeType","ReactNodeTypes","COMPOSITE","_renderedComponent","HOST","EMPTY"],"mappings":"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","file":"toJSON.js","sourcesContent":["import { Children } from 'react';\n\n/**\n * Converts both ExtReact and DOM components to json for Jest snapshots\n * @param {React.Component} component\n * @returns {Object}\n */\nexport default function toJSON(component) {\n    const element = component._currentElement;\n    const renderedChildren = component._renderedChildren;\n    if (typeof element === 'string') return element;\n    const { children, ...props } = element.props;\n    let jsonChildren = null;\n\n    if (typeof children === 'string') {\n        // inner text\n        jsonChildren = [children];\n    } else if (renderedChildren) {\n        // child components\n        jsonChildren = Object.keys(renderedChildren).map(key => {\n            let child = renderedChildren[key];\n            child = getHostComponentFromComposite(child) || child;\n            return child.toJSON ? child.toJSON() : toJSON(child);\n        })\n    }\n\n    const object = {\n        type: typeof element.type === 'string' ? element.type : element.type.name,\n        props: includeSerializable(props),\n        children: jsonChildren\n    };\n\n    Object.defineProperty(object, '$$typeof', {\n        value: Symbol['for']('react.test.json')\n    });\n\n    return object;\n}\n\n/**\n * Returns an object containing only the serializable keys from the source object.\n * @param {Object} obj The source object\n * @returns {Object}\n */\nfunction includeSerializable(obj) {\n    if (Array.isArray(obj)) {\n        const result = [];\n\n        for (let item of obj) {\n            if (typeof item === 'object') {\n                const jsonItem = includeSerializable(item);\n\n                if (jsonItem !== undefined) {\n                    result.push(jsonItem);\n                }\n            } else {\n                result.push(item);\n            }\n        }\n\n        return result;\n    } else if (typeof obj === 'object') {\n        if (obj.constructor !== Object) {\n            // include only the class name for complex objects\n            return { $className: obj.$className || obj.constructor.name || 'unknown' };\n        }\n\n        const result = { };\n\n        for (let key in obj) {\n            result[key] = includeSerializable(obj[key]);\n        }\n\n        return result;\n    } else {\n        return obj;\n    }\n}\n\n// borrowed from react-test-renderer\n\n/**\n * Gets the inner ExtReact or DOM component from the specified component\n * @param {React.Component} inst A component instance\n * @returns {React.Component}\n */\nfunction getHostComponentFromComposite(inst) {\n    var type;\n\n    while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {\n        inst = inst._renderedComponent;\n    }\n\n    if (type === ReactNodeTypes.HOST) {\n        return inst._renderedComponent;\n    } else if (type === ReactNodeTypes.EMPTY) {\n        return null;\n    }\n}\n\nexport const ReactNodeTypes = {\n    HOST: 0,\n    COMPOSITE: 1,\n    EMPTY: 2\n};"]}