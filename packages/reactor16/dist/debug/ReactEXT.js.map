{"version":3,"sources":["../../src/debug/ReactEXT.js"],"names":["ReactDOM","l","reactify2","React","ReactFiberReconciler","invariant","emptyObject","UPDATE_SIGNAL","EXTRenderer","createInstance","type","props","internalInstanceHandle","instance","xtype","toLowerCase","replace","extJSClass","Ext","ClassManager","getByAlias","undefined","reactifiedClass","appendInitialChild","parentInstance","childInstance","cmp","doAdd","reactChildren","createTextInstance","text","rootContainerInstance","finalizeInitialChildren","domElement","getPublicInstance","prepareForCommit","prepareUpdate","oldProps","newProps","resetAfterCommit","resetTextContent","shouldDeprioritizeSubtree","getRootHostContext","getChildHostContext","shouldSetTextContent","children","now","useSyncScheduling","mutation","appendChild","appendChildToContainer","target","insertBefore","child","beforeChild","injectBefore","insertInContainerBefore","removeChild","remove","removeChildFromContainer","commitTextUpdate","textInstance","oldText","newText","commitMount","commitUpdate","updatePayload","_applyProps","wrapDOMElement","node","contentEl","Component","cls","element","DOMLazyTree","insertTreeBefore","dom","document","createElement","HTMLElement","$createdByReactor","_extCmp","childXtype","parentCmp","childCmp","childPropsChildren","columns","newColumns","getColumns","item","push","setColumns","setMenu","getDocked","add","i","length","e","widget","create","render","el","extObject","doAdd2","isHTML","alert"],"mappings":"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","file":"ReactEXT.js","sourcesContent":["import ReactDOM from 'react-dom';\n\nimport { l } from './index'\nimport { reactify2 } from './reactify';\nimport React from 'react';\nimport ReactFiberReconciler from 'react-reconciler';\nimport invariant from 'fbjs/lib/invariant';\nimport emptyObject from 'fbjs/lib/emptyObject';\nconst UPDATE_SIGNAL = {};\n\nconst EXTRenderer = ReactFiberReconciler({\n\n  createInstance(type, props, internalInstanceHandle) {\n    let instance = null;\n    const xtype = type.toLowerCase().replace(/_/g, '-')\n    var extJSClass = Ext.ClassManager.getByAlias(`widget.${xtype}`)\n    if (extJSClass == undefined) {\n      l(`****** EXTRenderer extJSClass undefined ${xtype} (props, internalInstanceHandle)`, props, internalInstanceHandle )\n      return instance\n    }\n    else {\n      l(`EXTRenderer createInstance ${xtype} (props, internalInstanceHandle)`, props, internalInstanceHandle )\n      var reactifiedClass = reactify2(type) // could send xtype\n      instance =  new reactifiedClass(props);\n      return instance;\n    }\n  },\n\n  appendInitialChild(parentInstance, childInstance) {\n    if (parentInstance != null && childInstance != null) {\n      l('appendInitialChild (parentInstance.cmp.xtype, childInstance.xtype, parentInstance, childInstance)', parentInstance.cmp.xtype, childInstance.xtype, parentInstance, childInstance)\n      doAdd(childInstance.xtype, parentInstance.cmp, childInstance.cmp, childInstance.reactChildren)\n    }\n    //parentInstance.cmp.add(child.cmp) //Ext add\n\n    // if (typeof child === 'string') {\n    //   // Noop for string children of Text (eg <Text>{'foo'}{'bar'}</Text>)\n    //   invariant(false, 'Text children should already be flattened.');\n    //   return;\n    // }\n\n    // child.inject(parentInstance);\n\t},\n\n  createTextInstance(text, rootContainerInstance, internalInstanceHandle) {\nl(`createTextInstance (text, rootContainerInstance, internalInstanceHandle)`,text, rootContainerInstance, internalInstanceHandle)\n    return text;\n  },\n\n  finalizeInitialChildren(domElement, type, props) {\n    //first parm is NOT a domElement\nl(`finalizeInitialChildren********** ${type} (domElement, props)`,domElement, props)\n    return false;\n  },\n\n  getPublicInstance(instance) {\n    l(`getPublicInstance`,instance)\n    return instance;\n  },\n\n  prepareForCommit() {\n    l(`prepareForCommit**********`)\n    // Noop\n  },\n\n  prepareUpdate(domElement, type, oldProps, newProps) {\n    l(`prepareUpdate ${type} **********`)\n    return UPDATE_SIGNAL;\n  },\n\n  resetAfterCommit() {\n    l(`resetAfterCommit**********`)\n    // Noop\n  },\n\n  resetTextContent(domElement) {\n    l(`resetTextContent**********`)\n    // Noop\n  },\n\n  shouldDeprioritizeSubtree(type, props) {\n    l(`shouldDeprioritizeSubtree**********`)\n    return false;\n  },\n\n  getRootHostContext() {\n    l(`getRootHostContext**********`)\n    return emptyObject;\n  },\n\n  getChildHostContext() {\n    l(`getChildHostContext**********`)\n    return emptyObject;\n  },\n\n  //scheduleDeferredCallback: ReactDOMFrameScheduling.rIC,\n\n  shouldSetTextContent(type, props) {\n  l(`shouldSetTextContent**********`)\n    return (\n      typeof props.children === 'string' || typeof props.children === 'number'\n    );\n  },\n\n\n\n  //now: ReactDOMFrameScheduling.now,\n  now: () => {},\n\n  useSyncScheduling: true,\n\n  mutation: {\n    appendChild(parentInstance, childInstance) {\n      l('appendChild (childInstance.xtype, parentInstance, child)')\n      if (parentInstance != null && childInstance != null) {\n        l('appendChild (childInstance.xtype, parentInstance, child)', childInstance.xtype, parentInstance, childInstance)\n        doAdd(childInstance.xtype, parentInstance.cmp, childInstance.cmp, childInstance.reactChildren)\n      }\n    },\n\n    appendChildToContainer(parentInstance, childInstance) {\n      if (parentInstance != null && childInstance != null) {\n        l('appendChildToContainer (childInstance.target, parentInstance, childInstance)', childInstance.target, parentInstance, childInstance)\n        doAdd(childInstance.xtype, parentInstance, childInstance.cmp, childInstance.reactChildren)\n      }\n      else {\n        l('appendChildToContainer (null)')\n      }\n      // if (parentInstance.cmp != null && child != null) {\n      // \tl('appendChildToContainer (child.xtype, parentInstance, child)', child.xtype, parentInstance, child)\n      // \tdoAdd(child.xtype, parentInstance.cmp, child.cmp child.children)\n      // }\n    },\n\n    insertBefore(parentInstance, child, beforeChild) {\n      l(`insertBefore**********`)\n      invariant(\n        child !== beforeChild,\n        'ReactEXT: Can not insert node before itself',\n      );\n      child.injectBefore(beforeChild);\n    },\n\n    insertInContainerBefore(parentInstance, child, beforeChild) {\n      l(`insertInContainerBefore**********`)\n      invariant(\n        child !== beforeChild,\n        'ReactExt: Can not insert node before itself',\n      );\n      child.injectBefore(beforeChild);\n    },\n\n    removeChild(parentInstance, child) {\n      l(`removeChild (parentInstance, child)`, parentInstance, child)\n\n      if (parentInstance != null && child != null) {\n        parentInstance.cmp.remove(child.cmp, true)\n      }\n    },\n\n    removeChildFromContainer(parentInstance, child) {\n      l(`removeChildFromContainer (parentInstance, child)`, parentInstance, child)\n\n      if (parentInstance != null && child != null) {\n        parentInstance.remove(child.cmp, true)\n      }\n    },\n\n    commitTextUpdate(textInstance, oldText, newText) {\n      l(`commitTextUpdate**********`)\n      // Noop\n    },\n\n    commitMount(instance, type, newProps) {\n      l(`commitMount**********`)\n      // Noop\n    },\n\n    commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n      l(`commitUpdate ${type} (instance, updatePayload, oldProps, newProps)`, instance, updatePayload, oldProps, newProps)\n      instance._applyProps(oldProps, newProps);\n    },\n\n  },\n});\n\nexport default EXTRenderer\n\n\n/**\n * Wraps a dom element in an Ext Component so it can be added as a child item to an Ext Container.  We attach\n * a reference to the generated Component to the dom element so it can be destroyed later if the dom element\n * is removed when rerendering\n * @param {Object} node A React node object with node, children, and text\n * @returns {Ext.Component}\n */\nfunction wrapDOMElement(node) {\n  debugger;\n  let contentEl = node.node;\n\n  const cmp = new Ext.Component({ \n      // We give the wrapper component a class so that developers can reset css \n      // properties (ex. box-sizing: context-box) for third party components.\n      cls: 'x-react-element' \n  });\n  \n  if (cmp.element) {\n      // modern\n      DOMLazyTree.insertTreeBefore(cmp.element.dom, node);\n  } else {\n      // classic\n      const target = document.createElement('div');\n      DOMLazyTree.insertTreeBefore(target, node);\n      cmp.contentEl = contentEl instanceof HTMLElement ? contentEl : target /* text fragment or comment */;\n  }\n\n  cmp.$createdByReactor = true;\n  contentEl._extCmp = cmp;\n\n  // this is needed for devtools when using dangerouslyReplaceNodeWithMarkup\n  // this not needed in fiber\n  cmp.node = contentEl;\n\n  return cmp;\n}\n\n//this needs to be refactored\nfunction doAdd(childXtype, parentCmp, childCmp, childPropsChildren) {\n  debugger;\n  l(`doAdd ${childXtype} (parentCmp, childCmp, childPropsChildern)`, parentCmp, childCmp, childPropsChildren)\n  //which other types need special care?\n  if (childXtype == 'column' || childXtype == 'treecolumn' ) {\n    l(`doAdd use setColumns ${childXtype}`)\n    var columns = []\n    var newColumns = []\n    columns = parentCmp.getColumns()\n    for (var item in columns) {\n      newColumns.push(columns[item])\n    }\n    newColumns.push(childCmp)\n    parentCmp.setColumns(newColumns)\n  }\n  else if (parentCmp.xtype == 'button') {\n    if (childXtype == 'menu') {\n      parentCmp.setMenu(childCmp)\n    }\n    else {\n      l(`doAdd did nothing!!!`, parentCmp.xtype, childCmp.xtype)\n    }\n  }\n  else if (childXtype == 'toolbar') {\n    if (childCmp.getDocked() != undefined) {\n      //parentCmp.addDocked(childCmp)\n      parentCmp.add(childCmp)\n    }\n    else {\n      l(`doAdd did nothing!!!`, parentCmp.xtype, childCmp.xtype)\n    }\n  }\n  else if (parentCmp.add != undefined) {\n    l(`doAdd use add method`, parentCmp.xtype, childCmp.xtype)\n    parentCmp.add(childCmp)\n  }\n  else {\n    l(`doAdd did nothing!!!`, parentCmp.xtype, childCmp.xtype)\n  }\n  if (childPropsChildren == undefined) return\n  if (childPropsChildren.type == undefined) {\n    for (var i = 0; i < childPropsChildren.length; i++) {\n      var child = childPropsChildren[i]\n\n      var xtype = null\n      try {\n        var type = child.type\n        if (type == undefined) { \n          type = child[0].type \n        }\n        xtype = type.toLowerCase().replace(/_/g, '-')\n      }\n      catch(e) {\n        continue\n      }\n      //should call wrapDOMElement(node)??? what does classic do? can widget be used?\n\n      if (xtype != null) {\n        var target = Ext.ClassManager.getByAlias(`widget.${xtype}`)\n        if (target == undefined) {\n          l(`${xtype} is HTML`)\n          //should call wrapDOMElement(node)??? what does classic do? can widget be used?\n          var widget = Ext.create({xtype:'widget'})\n          childCmp.add(widget)\n          ReactDOM.render(child,widget.el.dom)\n        }\n        else {\n          l(`xtype is NULL`)\n        }\n      }\n      else {\n        l(`${xtype} is ExtJS`)\n      }\n    }\n  }\n  else {\n    l(childPropsChildren);\n    var child = childPropsChildren\n\n    var xtype = null\n    try {\n      var type = child.type\n      if (type == undefined) { \n        type = child[0].type \n      }\n      xtype = type.toLowerCase().replace(/_/g, '-')\n    }\n    catch(e) {\n    }\n\n    if (xtype != null) {\n      var extObject = Ext.ClassManager.getByAlias(`widget.${xtype}`)\n      if (extObject == undefined) {\n        l(`${xtype} is HTML`)\n        //should call wrapDOMElement(node)??? what does classic do? can widget be used?\n        var widget = Ext.create({xtype:'widget'})\n        childCmp.add(widget)\n        ReactDOM.render(child,widget.el.dom)\n      }\n      else {\n        l(`xtype is NULL`)\n      }\n    }\n    else {\n      l(`${xtype} is ExtJS`)\n    }\n\n  }\n}\n\nfunction doAdd2(childXtype, parentCmp, childCmp, childPropsChildren) {\n  debugger;\n  l(`doAdd ${childXtype} (parentCmp, childCmp, childPropsChildern)`, parentCmp, childCmp, childPropsChildren)\n  if (childXtype == 'column') {\n    l(`doAdd use setColumns ${childXtype}`)\n    var columns = []\n    var newColumns = []\n    columns = parentCmp.getColumns()\n    for (var item in columns) {\n      newColumns.push(columns[item])\n    }\n    newColumns.push(childCmp)\n    parentCmp.setColumns(newColumns)\n  }\n  else if (parentCmp.add != undefined) {\n    l(`doAdd use add method`, parentCmp.xtype, childCmp.xtype)\n    parentCmp.add(childCmp)\n  //\t\treturn\n\n    var isHTML = false\n    var children = childPropsChildren\n//    var arrayLength = childPropsChildren.length;\n    for (var i = 0; i < childPropsChildren.length; i++) {\n        alert(childPropsChildren[i]);\n    }\n\n\n\n\n    if (children != undefined) {\n      if (children.length == undefined) {\n        var child = children\n        if (child != undefined) {\n\n\n          if (child != undefined) {\n            if (child.type != undefined) {\n              if(child.type[0] != undefined) {\n                var type = child.type\n                const xtype = type.toLowerCase().replace(/_/g, '-')\n                var target = Ext.ClassManager.getByAlias(`widget.${xtype}`)\n                if (target == undefined) {\n  ///\t\t\t\t\t\t\t\tif (child.type[0] != child.type[0].toUpperCase()) {\n                  isHTML = true\n                }\n                else {\n//                  var Type = reactify2(type)\n//                  var instance =  new Type(child.props)\n                }\n              }\n            }\n          }\n\n\n        }\n      }\n      else {\n        for (var child of children) {\n\n\n          if (child != undefined) {\n            if (child.type != undefined) {\n              if(child.type[0] != undefined) {\n                var type = child.type\n                const xtype = type.toLowerCase().replace(/_/g, '-')\n                var target = Ext.ClassManager.getByAlias(`widget.${xtype}`)\n                if (target == undefined) {\n  ///\t\t\t\t\t\t\t\tif (child.type[0] != child.type[0].toUpperCase()) {\n                  isHTML = true\n                }\n                else {\n//                  var Type = reactify2(type)\n//                  var instance =  new Type(child.props)\n                }\n              }\n            }\n          }\n\n\n        }\n      }\n    }\n\n    if (isHTML) {\n      var widget = Ext.create({xtype:'widget'})\n      childCmp.add(widget)\n      ReactDOM.render(children,widget.el.dom)\n    }\n\n  }\n  else {\n    l(`doAdd ${xtype} undefined...`)\n  }\n}"]}