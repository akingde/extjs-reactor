{"version":3,"sources":["../../src/debug/ExtJSComponent.js"],"names":["ReactDOM","l","React","Component","Children","cloneElement","EXTRenderer","union","isEqual","capitalize","cloneDeepWith","ExtJSComponent","element","cmp","el","reactProps","reactChildren","reactElement","_getReactStuff","config","_getConfig","extJSClass","$createdByReactor","target","xtype","componentWillMount","componentDidMount","_mountNode","createContainer","updateContainer","componentDidUpdate","prevProps","prevState","isRootContainer","componentWillUnmount","render","children","undefined","prop","props","key","substr","event","toLowerCase","listeners","_ensureResponsivePlugin","Ext","isClassic","root","document","getElementsByClassName","renderTo","extJSConfig","responsiveConfig","plugins","Array","isArray","indexOf","push","resposive","responsive","getHostNode","getPublicInstance","_applyDefaults","defaults","map","child","type","prototype","_propForChildElement","item","rel","name","isAssignableFrom","CLASS_CACHE","Button","Menu","array","ToolTip","Column","CellBase","value","_cloneConfig","WidgetCell","Dialog","Field","initialConfig","xclass","$className","_eventNameForProp","propName","match","slice","_createConfig","includeEvents","_cloneProps","hasOwnProperty","eventName","replace","Base","_rushProps","oldProps","newProps","rushConfigs","__reactorUpdateConfigsBeforeChildren","oldConfigs","newConfigs","_applyProps","keys","oldValue","newValue","_replaceEvent","setter","_setterFor","reactorSettings","debug","console","log","oldHandler","newHandler","un","on","_capitalize","_getterFor","str","_precacheNode","_flags","Flags","hasCachedChildNodes","precacheNode","_doPrecacheNode","single","dom","_extCmp","_toReactChildIndex","n","items","found","i","length","_toArrayConfigIndex","indexInChildren","forEach","propForChild","_mergeConfig","index","isArrayDelete","$reactorConfig","getter","currentValue","filter","splice","concat","_ignoreChildrenOrder","_reactorIgnoreOrder","FitLayout","layout","TabPanel","wrapDOMElement","node","contentEl","cls","DOMLazyTree","insertTreeBefore","createElement","HTMLElement"],"mappings":"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","file":"ExtJSComponent.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport { l } from './index'\nimport React from 'react';\nimport { Component, Children, cloneElement } from 'react';\nimport EXTRenderer from './ReactEXT.js'\nimport union from 'lodash.union';\nimport isEqual from 'lodash.isequal';\nimport capitalize from 'lodash.capitalize'\nimport cloneDeepWith from 'lodash.clonedeepwith';\n\nexport class ExtJSComponent extends Component {\n\n  constructor(element) {\n    super(element)\n    this.cmp = null;\n    this.el = null;\n\n    this.reactProps = {}\n    this.reactChildren = {}\n    this.reactElement = {}\n    this._getReactStuff(element)\n\n    var config = this._getConfig()\n    this.cmp = new this.extJSClass(config)\n    this.cmp.$createdByReactor = true;\n\n    // if (Ext.isClassic) {\n    //   this.cmp.on('resize', () => this.cmp && this.cmp.updateLayout());\n    //   this.el = this.cmp.el.dom;\n    // } else {\n    //   this.el = this.cmp.renderElement.dom;\n    // }\n    //this.cmp.$reactorComponentName = componentName;\n    l(`in ExtJSComponent constructor for ${this.target}, Ext.create ${this.xtype}`, config)\n  }\n\n  componentWillMount() {\n    l(`componentWillMount ${this.target}`, this)\n  }\n\n  componentDidMount() {\n    l(`componentDidMount ${this.target}`, this)\n\n    l(`call EXTRenderer.createContainer for ${this.target}, (cmp)`, this.cmp)\n    this._mountNode = EXTRenderer.createContainer(this.cmp);\n    l(`call EXTRenderer.updateContainer for ${this.target}, (children)`, this.reactChildren)\n    EXTRenderer.updateContainer(this.reactChildren, this._mountNode, this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    l('componentDidUpdate')\n    if (this.isRootContainer) {\n      EXTRenderer.updateContainer(this.reactChildren, this._mountNode, this);\n    }\n  }\n\n  componentWillUnmount() {\n    l('componentWillUnmount')\n    EXTRenderer.updateContainer(null, this._mountNode, this);\n  }\n\n  render() {\n    l('render')\n    return null\n  }\n\n  _getReactStuff(element) {\n    /*******reactElement */\n    if (element.children == undefined || element.children == false ) {\n      for (var prop in element) {\n        if (prop != 'children') {\n          this.reactProps[prop] = element[prop];\n        }\n      }\n    }\n    else {\n      this.reactChildren = element.children\n      if (element.props == undefined) {\n        for (var prop in element) {\n          if (prop != 'children') {\n            this.reactProps[prop] = element[prop];\n          }\n        }\n      }\n      else {\n        this.reactProps = element.props\n      }\n    }\n//    l(`element`, element)\n//    l(`reactProps`, this.reactProps)\n//    l(`reactChildren`, this.reactChildren)\n    this.reactElement.props = this.reactProps\n    this.reactElement.children = this.reactChildren\n//    l(`reactElement`, this.reactElement)\n    /*******reactElement */\n  }\n\n  _getConfig() {\n    var config = {}\n    config.xtype = this.xtype\n    var props = this.reactProps\n    for (var key in props) {\n      //if (key == 'defaults') { debugger }\n      if(key.substr(0,2) === 'on') {\n        var event = key.substr(2).toLowerCase()\n        if (config.listeners == undefined) {\n          config.listeners = {}\n        }\n        config.listeners[event] = props[key]\n        //MetaData\n      }\n      else {\n        config[key] = props[key]\n        //MetaData\n      }\n    }\n    // if (config['cls'] != undefined) {\n    //   config['cls'] = config['cls'] + ' ' + 'XR' + this.xtype\n    // }\n    // else {\n    //   config['cls'] = 'XR' + this.xtype\n    // }\n    if (config['className'] != undefined) {\n      config['cls'] = config['cls'] + ' ' + config['className']\n    }\n    this._ensureResponsivePlugin(config);\n\n    if (this.isRootContainer) {\n      if (config['layout'] == undefined) {\n        config['layout'] = 'fit'\n        if (config['cls'] != undefined) {\n          config['cls'] = config['cls'] + ' ' + 'ExtReactRoot'\n        }\n        else {\n          config['cls'] = 'ExtReactRoot'\n        }\n      }\n      if (Ext.isClassic) {\n        config['height'] = '100%'\n        config['width'] = '100%'\n        var root = document.getElementsByClassName('reactroot')[0]\n        config.renderTo = root\n      }\n      else {\n        config['fullscreen'] = true\n        var root = document.getElementsByClassName('x-viewport-body-el')[0]\n        config.renderTo = root\n      }\n      this.extJSConfig = config\n    }\n    return config\n  }\n\n  _ensureResponsivePlugin(config) {\n    if (config.responsiveConfig) {\n      const { plugins } = config;\n\n      if (plugins == null) {\n        config.plugins = 'responsive';\n      } else if (Array.isArray(plugins) && plugins.indexOf('responsive') === -1) {\n        plugins.push('responsive');\n      } else if (typeof plugins === 'string') {\n        if (plugins !== 'responsive') {\n          config.plugins = [plugins, 'responsive'];\n      }\n      } else if (!plugins.resposive) {\n        plugins.responsive = true;\n      }\n    }\n  }\n\n  /**\n   * Returns the Ext JS component instance\n   */\n  getHostNode() {\n    return this.el;\n  }\n\n  /**\n   * Returns the Ext JS component instance\n   */\n  getPublicInstance() {\n    return this.cmp;\n  }\n\n\n  // _renderRootComponent(renderToDOMNode, config) {\n  //     defaults(config, {\n  //         height: '100%',\n  //         width: '100%'\n  //     });\n\n  //     config.renderTo = renderToDOMNode;\n\n  //     this.cmp = this.createExtJSComponent(config);\n\n  //     if (Ext.isClassic) {\n  //         this.cmp.el.on('resize', () => this.cmp && this.cmp.updateLayout());\n  //         this.el = this.cmp.el.dom;\n  //     } else {\n  //         this.el = this.cmp.renderElement.dom;\n  //     }\n\n  //     return { node: this.el, children: [] };\n  // }\n\n  _applyDefaults({ defaults, children }) {\n      if (defaults) {\n          return Children.map(children, child => {\n              if (child.type.prototype instanceof ExtJSComponent) {\n                  return cloneElement(child, { ...defaults, ...child.props })\n              } else {\n                  return child;\n              }\n          })\n      } else {\n          return children;\n      }\n  }\n\n//   /**\n//    * Creates an Ext JS component config from react element props\n//    * @private\n//    */\n//   _createInitialConfig(element) {\n//       const { props } = this.reactElement;\n//       const config = this._createConfig(props, false);\n\n//       this._ensureResponsivePlugin(config);\n\n// //      const items = [], dockedItems = [];\n      \n//       // if (children) {\n//       //     //const children = this.mountChildren(this._applyDefaults(props), transaction, context);\n//       //     //const children = props.children\n\n//       //     for (let i=0; i<children.length; i++) {\n//       //         const item = children[i];\n\n//       //         if (item instanceof Ext.Base) {\n//       //           console.log('should never get here...')\n//       //             const prop = this._propForChildElement(item);\n\n//       //             if (prop) {\n//       //                 item.$reactorConfig = true;\n//       //                 const value = config;\n\n//       //                 if (prop.array) {\n//       //                     let array = config[prop.name];\n//       //                     if (!array) array = config[prop.name] = [];\n//       //                     array.push(item);\n//       //                 } else {\n//       //                     config[prop.name] = prop.value || item;\n//       //                 }\n//       //             } else {\n//       //                 (item.dock ? dockedItems : items).push(item);\n//       //             }\n//       //         } else if (item.node) {\n//       //             items.push(wrapDOMElement(item));\n//       //         } else if (typeof item === 'string') {\n//       //             // will get here when rendering html elements in react-test-renderer\n//       //             // no need to do anything\n//       //         } else {\n//       //             throw new Error('Could not render child item: ' + item);\n//       //         }\n//       //     }\n//       // }\n\n//       // if (items.length) config.items = items;\n//       // if (dockedItems.length) config.dockedItems = dockedItems;\n\n//       return config;\n//   }\n\n  /**\n   * Determines whether a child element corresponds to a config or a container item based on the presence of a rel config or\n   * matching other known relationships\n   * @param {Ext.Base} item\n   */\n  _propForChildElement(item) {\n      if (item.config && item.config.rel) {\n          if (typeof item.config.rel === 'string') {\n              return { name: item.config.rel }\n          } else {\n              return item.config.rel;\n          }\n      }\n\n      const { extJSClass } = this;\n\n      if (isAssignableFrom(extJSClass, CLASS_CACHE.Button) && CLASS_CACHE.Menu && item instanceof CLASS_CACHE.Menu) {\n          return { name: 'menu', array: false };\n      } else if (isAssignableFrom(extJSClass, Ext.Component) && CLASS_CACHE.ToolTip && item instanceof CLASS_CACHE.ToolTip) {\n          return { name: 'tooltip', array: false };\n      } else if (CLASS_CACHE.Column && item instanceof CLASS_CACHE.Column) {\n          return { name: 'columns', array: true };\n      } else if (isAssignableFrom(extJSClass, CLASS_CACHE.Column) && CLASS_CACHE.CellBase && item instanceof CLASS_CACHE.CellBase) {\n          return { name: 'cell', array: false, value: this._cloneConfig(item) }\n      } else if (isAssignableFrom(extJSClass, CLASS_CACHE.WidgetCell)) {\n          return { name: 'widget', array: false, value: this._cloneConfig(item) }\n      } else if (isAssignableFrom(extJSClass, CLASS_CACHE.Dialog) && CLASS_CACHE.Button && item instanceof CLASS_CACHE.Button) {\n          return { name: 'buttons', array: true };\n      } else if (isAssignableFrom(extJSClass, CLASS_CACHE.Column) && CLASS_CACHE.Field && item instanceof CLASS_CACHE.Field) {\n          return { name: 'editor', array: false, value: this._cloneConfig(item) };\n      }\n  }\n\n  _cloneConfig(item) {\n      return { ...item.initialConfig, xclass: item.$className };\n  }\n\n  /**\n   * If the propName corresponds to an event listener (starts with \"on\" followed by a capital letter), returns the name of the event.\n   * @param {String} propName \n   * @param {String}\n   */\n  _eventNameForProp(propName) {\n      if (propName.match(/^on[A-Z]/)) {\n          return propName.slice(2).toLowerCase();\n      } else {\n          return null;\n      }\n  }\n\n  /**\n   * Creates an Ext config object for this specified props\n   * @param {Object} props\n   * @param {Boolean} [includeEvents] true to convert on* props to listeners, false to exclude them\n   * @private\n   */\n  _createConfig(props, includeEvents) {\n      props = this._cloneProps(props);\n\n      const config = {};\n      config.xtype = this.xtype\n\n      if (includeEvents) config.listeners = {};\n\n\n      for (let key in props) {\n          if (props.hasOwnProperty(key)) {\n              const value = props[key];\n              const eventName = this._eventNameForProp(key);\n\n              if (eventName) {\n                  if (value && includeEvents) config.listeners[eventName] = value;\n              } else if (key === 'config') {\n                  Object.assign(config, value);\n              } else if (key !== 'children' && key !== 'defaults') {\n                  config[key.replace(/className/, 'cls')] = value;\n              }\n          }\n      }\n\n\n      const { extJSClass } = this;\n\n      //need this???\n      // if (isAssignableFrom(extJSClass, CLASS_CACHE.Column) && typeof config.renderer === 'function' && CLASS_CACHE.RendererCell) {\n      //     config.cell = config.cell || {};\n      //     config.cell.xtype = 'renderercell';\n      // }\n\n      return config;\n  }\n\n\n\n  /**\n   * Cloning props rather than passing them directly on as configs fixes issues where Ext JS mutates configs during\n   * component initialization.  One example of this is grid columns get $initParent added when the grid initializes.\n   * @param {Object} props\n   * @private\n   */\n  _cloneProps(props) {\n      debugger;\n      return cloneDeepWith(props, value => {\n          if (value instanceof Ext.Base || typeof(value) === 'function') {\n              return value;\n          }\n      })\n  }\n\n  _rushProps(oldProps, newProps) {\n      debugger;\n      const rushConfigs = this.extJSClass.__reactorUpdateConfigsBeforeChildren;\n      if (!rushConfigs) return;\n      const oldConfigs = {}, newConfigs = {}\n\n      for (let name in rushConfigs) {\n          oldConfigs[name] = oldProps[name];\n          newConfigs[name] = newProps[name]\n      }\n\n      this._applyProps(oldConfigs, newConfigs);\n  }\n\n  /**\n   * Calls config setters for all react props that have changed\n   * @private\n   */\n  _applyProps(oldProps, props) {\n      const keys = union(Object.keys(oldProps), Object.keys(props));\n\n      for (let key of keys) {\n          const oldValue = oldProps[key], newValue = props[key];\n\n          if (key === 'children') continue;\n\n          if (!isEqual(oldValue, newValue)) {\n              const eventName = this._eventNameForProp(key);\n\n              if (eventName) {\n                  this._replaceEvent(eventName, oldValue, newValue);\n              } else {\n                  const setter = this._setterFor(key);\n\n                  if (setter) {\n                      const value = this._cloneProps(newValue);\n                      if (this.reactorSettings.debug) console.log(setter, newValue);\n                      this.cmp[setter](value);\n                  }\n              }\n          }\n      }\n  }\n\n  /**\n   * Detaches the old event listener and adds the new one.\n   * @param {String} eventName \n   * @param {Function} oldHandler \n   * @param {Function} newHandler \n   */\n  _replaceEvent(eventName, oldHandler, newHandler) {\n      debugger;\n      if (oldHandler) {\n          if (this.reactorSettings.debug) console.log(`detaching old listener for ${eventName}`);\n          this.cmp.un(eventName, oldHandler);\n      }\n\n      if (this.reactorSettings.debug) console.log(`attaching new listener for ${eventName}`);\n      this.cmp.on(eventName, newHandler);\n  }\n\n  /**\n   * Returns the name of the setter method for a given prop.\n   * @param {String} prop\n   */\n  _setterFor(prop) {\n      if (prop === 'className') {\n          prop = 'cls';\n      }\n      const name = `set${this._capitalize(prop)}`;\n      return this.cmp[name] && name;\n  }\n\n  /**\n   * Returns the name of a getter for a given prop.\n   * @param {String} prop\n   */\n  _getterFor(prop) {\n      const name = `get${this._capitalize(prop)}`;\n      return this.cmp[name] && name;\n  }\n\n  /**\n   * Capitalizes the first letter in the string\n   * @param {String} str\n   * @return {String}\n   * @private\n   */\n  _capitalize(str) {\n      return capitalize(str[0]) + str.slice(1);\n  }\n\n  _precacheNode() {\n      this._flags |= Flags.hasCachedChildNodes;\n\n      if (this.el) {\n          // will get here when rendering root component\n          precacheNode(this, this.el)\n      } else if (this.cmp.el) {\n          this._doPrecacheNode();\n      } else if (Ext.isClassic) {\n          // we get here when rendering child components due to lazy rendering\n          this.cmp.on('afterrender', this._doPrecacheNode, this, { single: true });\n      }\n  }\n\n  _doPrecacheNode() {\n      this.el = this.cmp.el.dom;\n      this.el._extCmp = this.cmp;\n      precacheNode(this, this.el)\n  }\n\n  /**\n   * Returns the child item at the given index, only counting those items which were created by Reactor\n   * @param {Number} n\n   */\n  _toReactChildIndex(n) {\n      let items = this.cmp.items;\n\n      if (!items) return n;\n      if (items.items) items = items.items;\n\n      let found=0, i, item;\n\n      for (i=0; i<items.length; i++) {\n          item = items[i];\n\n          if (item.$createdByReactor && found++ === n) {\n              return i;\n          }\n      }\n\n      return i;\n  }\n\n  /**\n   * Translates and index in props.children to an index within a config value that is an array.  Use\n   * this to determine the position of an item in props.children within the array config to which it is mapped.\n   * @param {*} prop\n   * @param {*} indexInChildren\n   */\n  _toArrayConfigIndex(prop, indexInChildren) {\n      let i=0, found=0;\n\n      Children.forEach(this.props.children, child => {\n          const propForChild = this._propForChildElement(child);\n\n          if (propForChild && propForChild.name === prop.name) {\n              if (i === indexInChildren) return found;\n              found++;\n          }\n      });\n\n      return -1;\n  }\n\n  /**\n   * Updates a config based on a child element\n   * @param {Object} prop The prop descriptor (name and array)\n   * @param {Ext.Base} value The value to set\n   * @param {Number} [index] The index of the child element in props.children\n   * @param {Boolean} [isArrayDelete=false] True if removing the item from an array\n   */\n  _mergeConfig(prop, value, index, isArrayDelete) {\n      const setter = this._setterFor(prop.name);\n      if (!setter) return;\n\n      if (value) value.$reactorConfig = true;\n\n      if (prop.array) {\n          const getter = this._getterFor(prop.name);\n          if (!getter) return;\n\n          const currentValue = this.cmp[getter]() || [];\n\n          if (isArrayDelete) {\n              // delete\n              value = currentValue.filter(item => item !== value);\n          } else if (index !== undefined) {\n              // move\n              value = currentValue.filter(item => item !== value);\n              value = value.splice(this._toArrayConfigIndex(index, prop), 0, item);\n          } else {\n              // append\n              value = currentValue.concat(value);\n          }\n      }\n\n      if (this.reactorSettings.debug) console.log(setter, value);\n\n      this.cmp[setter](value);\n  }\n\n  _ignoreChildrenOrder() {\n      // maintaining order in certain components, like Transition's container, can cause problems with animations, _reactorIgnoreOrder gives us a way to opt out in such scenarios\n      if (this.cmp._reactorIgnoreOrder) return true; \n\n      // moving the main child of a container with layout fit causes it to disappear.  Instead we do nothing, which\n      // should be ok because fit containers are not ordered\n      if (CLASS_CACHE.FitLayout && this.cmp.layout instanceof CLASS_CACHE.FitLayout) return true; \n\n      // When tab to the left of the active tab is removed, the left-most tab would always be selected as the tabs to the right are reinserted\n      if (CLASS_CACHE.TabPanel && this.cmp instanceof CLASS_CACHE.TabPanel) return true;\n  }\n}\n\n\n\n/**\n * Wraps a dom element in an Ext Component so it can be added as a child item to an Ext Container.  We attach\n * a reference to the generated Component to the dom element so it can be destroyed later if the dom element\n * is removed when rerendering\n * @param {Object} node A React node object with node, children, and text\n * @returns {Ext.Component}\n */\nfunction wrapDOMElement(node) {\n    debugger;\n  let contentEl = node.node;\n\n  const cmp = new Ext.Component({ \n      // We give the wrapper component a class so that developers can reset css \n      // properties (ex. box-sizing: context-box) for third party components.\n      cls: 'x-react-element' \n  });\n  \n  if (cmp.element) {\n      // modern\n      DOMLazyTree.insertTreeBefore(cmp.element.dom, node);\n  } else {\n      // classic\n      const target = document.createElement('div');\n      DOMLazyTree.insertTreeBefore(target, node);\n      cmp.contentEl = contentEl instanceof HTMLElement ? contentEl : target /* text fragment or comment */;\n  }\n\n  cmp.$createdByReactor = true;\n  contentEl._extCmp = cmp;\n\n  // this is needed for devtools when using dangerouslyReplaceNodeWithMarkup\n  // this not needed in fiber\n  cmp.node = contentEl;\n\n  return cmp;\n}"]}