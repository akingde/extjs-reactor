{"version":3,"sources":["../src/index.js"],"names":["React","reactify","settings","l","name","val","val2","val3","val4","debug","console","group","undefined","log","groupEnd","ReactDOM","configure","default","Template","renderWhenReady","Ext","window","go","callback","element","namespace","application","launch","Viewport","getRenderTarget","target","dom","rootElement","appElement","createElement","theElements","ExtReact","rootComponent","render","options","viewport","style","document","innerHTML","head","appendChild","setAttribute","body","appConfig","install","warn"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport { reactify } from './reactify'\n\n//ccimport { ExtReact } from '@extjs/ext-react';\n//var ExtReact = reactify('ExtReact')\n\nimport { settings } from './reactify'\nexport { reactify }\n\nexport function l(name,val,val2,val3,val4){\n  if (settings.debug) { \n    console.group(name);\n    if (val != undefined) {\n      console.log(val)\n    }\n    if (val2 != undefined) {\n      console.log(val2)\n    }\n    if (val3 != undefined) {\n      console.log(val3)\n    }\n    if (val4 != undefined) {\n      console.log(val4)\n    }\n    console.groupEnd();\n  }\n}\n\nimport ReactDOM from 'react-dom';\nimport './overrides';\nimport { configure } from './reactify';\n\n\n\n\nexport { default as Template } from './Template';\nexport { default as renderWhenReady } from './renderWhenReady';\n\nconst Ext = window.Ext;\n\nexport function go({callback, element}) {\n  debugger\n  Ext.namespace('Ext.reactor').ReactDOM = ReactDOM; // needed for RendererCell and any other components that can render React elements;\n  //var rootEl = rootElement\n// \n  Ext.application({\n    name: '$ExtReactApp',\n//    ...appConfig,\n    launch: () => {\n      debugger\n      if (Ext.Viewport && Ext.Viewport.getRenderTarget) {\n        // modern, ext-react\n        const target = Ext.Viewport.getRenderTarget().dom;\n        if (callback != undefined) {\n          var rootElement = element\n//        if (typeof rootComponent === 'function') {\n          //r theElement = React.createElement(rootElement,null)\n\n          //rootComponent(<ExtReact></ExtReact>, target);\n          //rootComponent(rootElement, target);\n                    //var theElements = <ExtReact> <element/> </ExtReact>\n\n                    var appElement = React.createElement(rootElement)\n                    //var v1 = React.isValidElement(e1)\n                    //var m = React.Children.map(rootElement, null)\n                    //var o1 = React.Children.only(e1)\n\n          var theElements = React.createElement(ExtReact,null,[...appElement])\n          //var theElements = React.createElement(ExtReact,null,React.createElement(element,null,null))\n          //var theElements = React.createElement(element)\n\n          callback(theElements, target);\n        }\n        if (rootComponent) {\n          ReactDOM.render(<ExtReact>React.createElement(rootComponent,null)</ExtReact>, target);\n        }\n      } else {\n        // classic\n        if (options.viewport || rootComponent) {\n          const style = document.createElement('style');\n          style.innerHTML = 'html, body, div[reactroot] { height: 100%; }';\n          document.head.appendChild(style);\n        }\n\n        const target = document.createElement('div');\n        target.setAttribute('reactroot', 'on');\n        target.setAttribute('class', 'reactroot');\n        document.body.appendChild(target);\n\n        if (typeof rootComponent === 'function') {\n          rootComponent = rootComponent(target);\n        }\n\n        if (rootComponent) {\n          ReactDOM.render(rootComponent, target);\n        }\n      }\n    }\n  });\n\n\n\n}\n\n\n/**\n * Launches an ExtReact application, creating a viewport and rendering the specified root component into it.\n * @xparam {React.Component/Function} rootComponent You application's root component, or a function that returns the root component.\n * @xparam {Object} [options] Additional config parameters for reactor.\n * @xparam {Object} options.debug Set to true to show debug information in the console related to creating, updating, and destroying Ext JS components.\n * @xparam {Object} options.viewport  When using Ext JS classic, set to true to have the root component sized to the full height and width of the window.\n * @xparam {Object} [appConfig] Additional config parameters for Ext.application\n */\nexport function launch(rootComponent, options = { debug: false, viewport: false }, appConfig = { }) {\n  configure(options);\n  Ext.namespace('Ext.reactor').ReactDOM = ReactDOM; // needed for RendererCell and any other components that can render React elements;\n\n// \n  Ext.application({\n    name: '$ExtReactApp',\n    ...appConfig,\n    launch: () => {\n      if (Ext.Viewport && Ext.Viewport.getRenderTarget) {\n        // modern, ext-react\n        const target = Ext.Viewport.getRenderTarget().dom;\n        if (typeof rootComponent === 'function') {\n          rootComponent = rootComponent(target);\n        }\n        if (rootComponent) {\n          ReactDOM.render(rootComponent, target);\n        }\n      } else {\n        // classic\n        if (options.viewport || rootComponent) {\n          const style = document.createElement('style');\n          style.innerHTML = 'html, body, div[reactroot] { height: 100%; }';\n          document.head.appendChild(style);\n        }\n\n        const target = document.createElement('div');\n        target.setAttribute('reactroot', 'on');\n        target.setAttribute('class', 'reactroot');\n        document.body.appendChild(target);\n\n        if (typeof rootComponent === 'function') {\n          rootComponent = rootComponent(target);\n        }\n\n        if (rootComponent) {\n          ReactDOM.render(rootComponent, target);\n        }\n      }\n    }\n  });\n}\n\n/**\n * Configures React to resolve jsx tags.\n * @deprecated\n * @param {Object} options\n * @param {String} options.viewport When true, adds a stylesheet that mimics an Ext JS Viewport\n *  by setting the html, body, and react root element to height: 100%. Set this to true when using an\n *  Ext JS component at the root of your app.\n */\nexport function install(options) {\n  if (options.viewport) {\n    console.warn('[@extjs/reactor] Warning: install({ viewport: true }) is deprecated.  Use launch(<App/>) in place of Ext.onReady(() => ReactDOM.render(<App/>, document.getElementById(\\'root\\'))).')\n  } else {\n    console.warn('[@extjs/reactor] Warning: install() is deprecated.  Use launch(() => ReactDOM.render(<App/>, document.getElementById(\\'root\\'))) in place of Ext.onReady(() => ReactDOM.render(<App/>, document.getElementById(\\'root\\'))).')\n  }\n\n  launch(null, options);\n};\n"]}