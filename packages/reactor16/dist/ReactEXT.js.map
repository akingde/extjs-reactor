{"version":3,"sources":["../src/ReactEXT.js"],"names":["ReactDOM","l","reactify2","React","ReactFiberReconciler","invariant","emptyObject","UPDATE_SIGNAL","EXTRenderer","createInstance","type","props","internalInstanceHandle","instance","xtype","toLowerCase","replace","extJSClass","Ext","ClassManager","getByAlias","undefined","reactifiedClass","appendInitialChild","parentInstance","childInstance","rawConfigs","cmp","childXtype","rawcolumns","push","rawitems","createTextInstance","text","rootContainerInstance","finalizeInitialChildren","ExtJSComponent","rawConfig","columns","items","console","log","getPublicInstance","prepareForCommit","prepareUpdate","domElement","oldProps","newProps","resetAfterCommit","resetTextContent","shouldDeprioritizeSubtree","getRootHostContext","getChildHostContext","shouldSetTextContent","children","now","useSyncScheduling","mutation","appendChild","doAdd","reactChildren","appendChildToContainer","target","insertBefore","child","beforeChild","injectBefore","insertInContainerBefore","removeChild","remove","removeChildFromContainer","commitTextUpdate","textInstance","oldText","newText","commitMount","commitUpdate","updatePayload","_applyProps","wrapDOMElement","node","contentEl","Component","cls","element","DOMLazyTree","insertTreeBefore","dom","document","createElement","HTMLElement","$createdByReactor","_extCmp","parentCmp","childCmp","childPropsChildren","setTooltip","setPlugin","setMenu","isClassic","addDockedItems","getHideHeaders","i","length","insert","add","setHtml","e","widget","create","render","el","extObject"],"mappings":"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","file":"ReactEXT.js","sourcesContent":["import ReactDOM from 'react-dom';\n\nimport { l } from './index'\nimport { reactify2 } from './reactify';\nimport React from 'react';\nimport ReactFiberReconciler from 'react-reconciler';\nimport invariant from 'fbjs/lib/invariant';\nimport emptyObject from 'fbjs/lib/emptyObject';\nconst UPDATE_SIGNAL = {};\n\nconst EXTRenderer = ReactFiberReconciler({\n\n  createInstance(type, props, internalInstanceHandle) {\n\n    let instance = null;\n    const xtype = type.toLowerCase().replace(/_/g, '-')\n    var extJSClass = Ext.ClassManager.getByAlias(`widget.${xtype}`)\n    if (extJSClass == undefined) {\n      l(`EXTRenderer: createInstance, type: ${type}, extJSClass undefined`)\n\n      //console.warn(`EXTRenderer.createInstance extJSClass undefined`)\n      //l(`****** EXTRenderer.createInstance extJSClass undefined ${xtype} (props, internalInstanceHandle)`, props, internalInstanceHandle )\n      // var extJSChild = Ext.ClassManager.getByAlias(`widget.component`)\n      // var widget = Ext.create({xtype:'widget'})\n      // debugger\n      // var child = <div>hey</div>\n      // ReactDOM.render(child,extJSChild.cmp.el.dom)\n      // return widget\n      return instance\n    }\n    else {\n      l(`EXTRenderer: createInstance, type: ${type}, (props, internalInstanceHandle)`, props, internalInstanceHandle)\n      //l(`EXTRenderer.createInstance ${xtype} (props, internalInstanceHandle)`, props, internalInstanceHandle )\n      var reactifiedClass = reactify2(type) // could send xtype\n      instance =  new reactifiedClass(props);\n\n//      instance._applyProps(instance, props)\n\n\n      return instance;\n    }\n  },\n\n  appendInitialChild(parentInstance, childInstance) {\n    if (parentInstance != null && childInstance != null) {\n      l(`EXTRenderer: appendInitialChild, parentxtype: ${parentInstance.rawConfigs.xtype}, childxtype: ${childInstance.cmp.xtype}, (parentInstance, childInstance)`,parentInstance, childInstance)\n //     l('appendInitialChild (parentInstance.cmp.xtype, childInstance.xtype, parentInstance, childInstance)', parentInstance.cmp.xtype, childInstance.xtype, parentInstance, childInstance)\n      var childXtype = childInstance.xtype\n      if (childXtype == 'column' || \n      childXtype == 'treecolumn' || \n      childXtype == 'textcolumn' || \n      childXtype == 'checkcolumn' || \n      childXtype == 'datecolumn' || \n      childXtype == 'numbercolumn' )\n      {\n        if(parentInstance.rawcolumns == undefined) { parentInstance.rawcolumns = [] }\n        parentInstance.rawcolumns.push(childInstance.cmp)\n      }\n      else {\n        if(parentInstance.rawitems == undefined) { parentInstance.rawitems = [] }\n        parentInstance.rawitems.push(childInstance.cmp)\n\n        //doAdd(childInstance.xtype, parentInstance.cmp, childInstance.cmp, childInstance.reactChildren)\n      }\n    }\n    //parentInstance.cmp.add(child.cmp) //Ext add\n\n    // if (typeof child === 'string') {\n    //   // Noop for string children of Text (eg <Text>{'foo'}{'bar'}</Text>)\n    //   invariant(false, 'Text children should already be flattened.');\n    //   return;\n    // }\n\n    // child.inject(parentInstance);\n\t},\n\n  createTextInstance(text, rootContainerInstance, internalInstanceHandle) {\n    //l(`createTextInstance (text, rootContainerInstance, internalInstanceHandle)`,text, rootContainerInstance, internalInstanceHandle)\n    return text;\n  },\n\n  finalizeInitialChildren(ExtJSComponent, type, props) {\n    //first parm is NOT a domElement\n    //l(`finalizeInitialChildren********** ${type} (ExtJSComponent?, props)`,ExtJSComponent, props)\n    const xtype = type.toLowerCase().replace(/_/g, '-')\n    if (ExtJSComponent != null) {\n\n      l(`EXTRenderer: finalizeInitialChildren, type: ${type}, xtype: ${xtype}, (ExtJSComponent, props)`, ExtJSComponent,props)\n      if(ExtJSComponent.rawcolumns != undefined) {\n        l(`new set columns config (parent xtype,child columns)`,ExtJSComponent.rawConfig.xtype,ExtJSComponent.rawcolumns)\n        //ExtJSComponent.cmp.setColumns(ExtJSComponent.rawcolumns)\n        ExtJSComponent.rawConfigs.columns = ExtJSComponent.rawcolumns\n//        l(`ExtJSComponent now`,ExtJSComponent)\n      }\n      if(ExtJSComponent.rawitems != undefined) {\n        l(`new set items config (parent xtype,child columns)`,ExtJSComponent.rawConfig.xtype,ExtJSComponent.rawitems)\n        //ExtJSComponent.cmp.setItems(ExtJSComponent.rawitems)\n        ExtJSComponent.rawConfigs.items = ExtJSComponent.rawitems\n//        l(`ExtJSComponent now`,ExtJSComponent)\n      }\n      console.log('before new')\n      ExtJSComponent.cmp = new ExtJSComponent.extJSClass(ExtJSComponent.rawConfigs)\n      l(`EXTRenderer: finalizeInitialChildren, type: ${type}, xtype: ${xtype}, (ExtJSComponent.rawConfig, ExtJSComponent.cmp)`, ExtJSComponent.rawConfig, ExtJSComponent.cmp)\n      console.log('')\n    }\n    else {\n      l(`EXTRenderer: finalizeInitialChildren, type: ${type}, xtype: ${xtype}, ExtJSComponent == null`)\n      console.log('')\n    }\n\n    //mjg\n    // if (xtype == 'segmentedbutton') { \n    //   if(props.value != undefined){ \n    //     ExtJSComponent.cmp.setValue(props.value) \n    //   }\n    //   if (ExtJSComponent.rawListeners != undefined) {\n    //     ExtJSComponent.cmp.setListeners(ExtJSComponent.rawListeners) \n    //   }\n    // }\n\n    return true;\n  },\n\n  getPublicInstance(instance) {\n    l(`getPublicInstance`,instance)\n    return instance;\n  },\n\n  prepareForCommit() {\n    l(`prepareForCommit**********`)\n    // Noop\n  },\n\n  prepareUpdate(domElement, type, oldProps, newProps) {\n    l(`prepareUpdate ${type} **********`)\n    return UPDATE_SIGNAL;\n  },\n\n  resetAfterCommit() {\n    l(`resetAfterCommit**********`)\n    // Noop\n  },\n\n  resetTextContent(domElement) {\n    l(`resetTextContent**********`)\n    // Noop\n  },\n\n  shouldDeprioritizeSubtree(type, props) {\n    l(`shouldDeprioritizeSubtree**********`)\n    return false;\n  },\n\n  getRootHostContext() {\n//    l(`getRootHostContext**********`)\n    return emptyObject;\n  },\n\n  getChildHostContext() {\n//    l(`getChildHostContext**********`)\n    return emptyObject;\n  },\n\n  //scheduleDeferredCallback: ReactDOMFrameScheduling.rIC,\n\n  shouldSetTextContent(type, props) {\n    //l(`shouldSetTextContent**********type,props`,type,props)\n    return (\n      typeof props.children === 'string' || typeof props.children === 'number'\n    );\n  },\n\n\n\n  //now: ReactDOMFrameScheduling.now,\n  now: () => {},\n\n  useSyncScheduling: true,\n\n  mutation: {\n    appendChild(parentInstance, childInstance) {\n      l('appendChild (childInstance.xtype, parentInstance, child)')\n      if (parentInstance != null && childInstance != null) {\n        l('appendChild (childInstance.xtype, parentInstance, child)', childInstance.xtype, parentInstance, childInstance)\n        doAdd(childInstance.xtype, parentInstance.cmp, childInstance.cmp, childInstance.reactChildren)\n      }\n    },\n\n    appendChildToContainer(parentInstance, childInstance) {\n\n      if (parentInstance != null && childInstance != null) {\n        l('appendChildToContainer (childInstance.target, parentInstance, childInstance)', childInstance.target, parentInstance, childInstance)\n        doAdd(childInstance.xtype, parentInstance, childInstance.cmp, childInstance.reactChildren)\n      }\n      else {\n        l('appendChildToContainer (null)', parentInstance)\n        l('appendChildToContainer (null)', childInstance)\n\n      }\n      // if (parentInstance.cmp != null && child != null) {\n      // \tl('appendChildToContainer (child.xtype, parentInstance, child)', child.xtype, parentInstance, child)\n      // \tdoAdd(child.xtype, parentInstance.cmp, child.cmp child.children)\n      // }\n    },\n\n    insertBefore(parentInstance, child, beforeChild) {\n      l(`insertBefore**********`)\n      invariant(\n        child !== beforeChild,\n        'ReactEXT: Can not insert node before itself',\n      );\n      child.injectBefore(beforeChild);\n    },\n\n    insertInContainerBefore(parentInstance, child, beforeChild) {\n      l(`insertInContainerBefore**********`)\n      invariant(\n        child !== beforeChild,\n        'ReactExt: Can not insert node before itself',\n      );\n      child.injectBefore(beforeChild);\n    },\n\n    removeChild(parentInstance, child) {\n      l(`removeChild (parentInstance, child)`, parentInstance, child)\n\n      if (parentInstance != null && child != null) {\n        //not working commented out for tab panel close - does this cause anything to break??\n        parentInstance.cmp.remove(child.cmp, true)\n      }\n    },\n\n    removeChildFromContainer(parentInstance, child) {\n      l(`removeChildFromContainer (parentInstance, child)`, parentInstance, child)\n\n      if (parentInstance != null && child != null) {\n        parentInstance.remove(child.cmp, true)\n      }\n    },\n\n    commitTextUpdate(textInstance, oldText, newText) {\n      l(`commitTextUpdate**********`)\n      // Noop\n    },\n\n    commitMount(instance, type, newProps) {\n      //l(`commitMount**********`)\n      // Noop\n    },\n\n    commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n      l(`commitUpdate ${type} (instance, updatePayload, oldProps, newProps)`, instance, updatePayload, oldProps, newProps)\n\n      // if(type == 'PivotD3Container') {\n      //   debugger\n      // }\n\n      instance._applyProps(oldProps, newProps);\n    },\n\n  },\n});\n\nexport default EXTRenderer\n\n\n/**\n * Wraps a dom element in an Ext Component so it can be added as a child item to an Ext Container.  We attach\n * a reference to the generated Component to the dom element so it can be destroyed later if the dom element\n * is removed when rerendering\n * @param {Object} node A React node object with node, children, and text\n * @returns {Ext.Component}\n */\nfunction wrapDOMElement(node) {\n  let contentEl = node.node;\n\n  const cmp = new Ext.Component({ \n      // We give the wrapper component a class so that developers can reset css \n      // properties (ex. box-sizing: context-box) for third party components.\n      cls: 'x-react-element' \n  });\n  \n  if (cmp.element) {\n      // modern\n      DOMLazyTree.insertTreeBefore(cmp.element.dom, node);\n  } else {\n      // classic\n      const target = document.createElement('div');\n      DOMLazyTree.insertTreeBefore(target, node);\n      cmp.contentEl = contentEl instanceof HTMLElement ? contentEl : target /* text fragment or comment */;\n  }\n\n  cmp.$createdByReactor = true;\n  contentEl._extCmp = cmp;\n\n  // this is needed for devtools when using dangerouslyReplaceNodeWithMarkup\n  // this not needed in fiber\n  cmp.node = contentEl;\n\n  return cmp;\n}\n\n//this needs to be refactored\nfunction doAdd(childXtype, parentCmp, childCmp, childPropsChildren) {\n  l(`ReactEXT.js: doAdd, parentxtype: ${parentCmp.xtype}, childxtype: ${childXtype}, (parentCmp, childCmp, childPropsChildern)`, parentCmp, childCmp, childPropsChildren)\n//  l(`EXTRenderer: createInstance, type: ${type}, extJSClass undefined`)\n\n  //which other types need special care?\n\n\n  // if (childXtype == 'column' || \n  //     childXtype == 'treecolumn' || \n  //     childXtype == 'textcolumn' || \n  //     childXtype == 'checkcolumn' || \n  //     childXtype == 'datecolumn' || \n  //    childXtype == 'rownumberer' ||\n  //     childXtype == 'numbercolumn' ) {\n  //   l(`doAdd use setColumns ${childXtype}`)\n  //   var columns = []\n  //   var newColumns = []\n  //   columns = parentCmp.getColumns()\n  //   for (var item in columns) {\n  //     newColumns.push(columns[item])\n  //   }\n  //   newColumns.push(childCmp)\n  //   parentCmp.setColumns(newColumns)\n  // }\n\n\n  if (parentCmp.xtype == 'tooltip') {\n    parentCmp.setTooltip(childCmp)\n  }\n  else if (parentCmp.xtype == 'plugin') {\n    parentCmp.setPlugin(childCmp)\n  }\n  else if (parentCmp.xtype == 'button') {\n    if (childXtype == 'menu') {\n//      l(`doAdd button/menu`)\n      l(`ReactEXT.js: doAdd, parentxtype: ${parentCmp.xtype}, childxtype: ${childXtype}, button/menu setMenu`)\n      parentCmp.setMenu(childCmp)\n    }\n    else {\n      l(`ReactEXT.js: doAdd, parentxtype: ${parentCmp.xtype}, childxtype: ${childXtype}, did nothing!!!`)\n      //l(`doAdd did nothing!!!`, parentCmp.xtype, childCmp.xtype)\n    }\n  }\n\n  else if (childXtype == 'toolbar'  && Ext.isClassic == true) {\n    l(`ReactEXT.js: doAdd, parentxtype: ${parentCmp.xtype}, childxtype: ${childXtype}, toolbar, classic, addDockedItems`)\n    parentCmp.addDockedItems(childCmp)\n  }\n\n\n  else if ((childXtype == 'toolbar' || childXtype == 'titlebar') && parentCmp.getHideHeaders != undefined) {\n    if (parentCmp.getHideHeaders() == false) {\n//      l(`doAdd toolbar hideHeaders is false`)\n      l(`ReactEXT.js: doAdd, parentxtype: ${parentCmp.xtype}, childxtype: ${childXtype}, toolbar hideHeaders is false, insert`)\n      var i = parentCmp.items.items.length\n      parentCmp.insert(i-1,childCmp)\n     }\n    else {\n      //l(`doAdd toolbar hideHeaders is true`)\n      l(`ReactEXT.js: doAdd, parentxtype: ${parentCmp.xtype}, childxtype: ${childXtype}, toolbar hideHeaders is false, add`)\n      parentCmp.add(childCmp)\n    }\n  }\n  else if (parentCmp.add != undefined) {\n    //l(`doAdd use add method`, parentCmp.xtype, childCmp.xtype)\n    l(`ReactEXT.js: doAdd, parentxtype: ${parentCmp.xtype}, childxtype: ${childXtype}, add`)\n    parentCmp.add(childCmp)\n  }\n  else {\n    //l(`doAdd did nothing!!!`, parentCmp.xtype, childCmp.xtype)\n    l(`ReactEXT.js: doAdd, parentxtype: ${parentCmp.xtype}, childxtype: ${childXtype}, did nothing!!!`)\n\n  }\n  if (childPropsChildren == undefined) return\n  if (childPropsChildren.type == undefined) { \n    if(typeof childPropsChildren === \"string\") {\n      //PLAIN TEXT CASE\n      var text=childPropsChildren\n      //l(`${text} is PLAIN TEXT`)\n      l(`ReactEXT.js: doAdd, parentxtype: ${parentCmp.xtype}, childxtype: ${childXtype}, ${text} is PLAIN TEXT`)\n      childCmp.setHtml(text)\n    } \n    else {\n      l(`ReactEXT.js: doAdd, parentxtype: ${parentCmp.xtype}, childxtype: ${childXtype}, (children)`, childPropsChildren)\n      for (var i = 0; i < childPropsChildren.length; i++) {\n        var child = childPropsChildren[i]\n        var xtype = null\n        try {\n          var type = child.type\n          if (type == undefined) { \n            type = child[0].type \n          }\n          xtype = type.toLowerCase().replace(/_/g, '-')\n        }\n        catch(e) {\n          l(`ReactEXT.js: doAdd, child ${i}, catch (child)`, child)\n          continue\n        }\n        if (xtype != null) {\n          var target = Ext.ClassManager.getByAlias(`widget.${xtype}`)\n          if (target == undefined) {\n            //l(`${xtype} is HTML`)\n            l(`ReactEXT.js: doAdd, child ${i}, xtype: ${xtype}, is HTML`)\n            //should call wrapDOMElement(node)??? what does classic do? can widget be used?\n            var widget = Ext.create({xtype:'widget'})\n            childCmp.add(widget)\n            ReactDOM.render(child,widget.el.dom)\n          }\n          else {\n//            l(`xtype is NULL`)\n            l(`ReactEXT.js: doAdd, child ${i}, xtype: ${xtype}, target ${xtype}`)\n          }\n        }\n        else {\n          l(`ReactEXT.js: doAdd, children, xtype: ${xtype}, i: ${i}, is null`)\n          //l(`${xtype} is ExtJS`)\n        }\n      }\n    }\n    \n  }\n  else {\n    l(childPropsChildren);\n    var child = childPropsChildren\n\n    var xtype = null\n    try {\n      var type = child.type\n      if (type == undefined) { \n        type = child[0].type \n      }\n      xtype = type.toLowerCase().replace(/_/g, '-')\n    }\n    catch(e) {\n    }\n\n    if (xtype != null) {\n      var extObject = Ext.ClassManager.getByAlias(`widget.${xtype}`)\n      if (extObject == undefined) {\n        l(`${xtype} is HTML`)\n        //should call wrapDOMElement(node)??? what does classic do? can widget be used?\n        var widget = Ext.create({xtype:'widget'})\n        childCmp.add(widget)\n        ReactDOM.render(child,widget.el.dom)\n      }\n      else {\n        l(`xtype is NULL`)\n      }\n    }\n    else {\n      l(`${xtype} is ExtJS`)\n    }\n\n  }\n}\n"]}