{"version":3,"sources":["../src/overrides.js"],"names":["Template","Ext","window","getTpl","XTemplate","originalGet","get","fn","apply","arguments","originalRipple","dom","Element","prototype","ripple","event","persist","originalWidgetIsXtype","Widget","isXType","xtype","shallow","call","toLowerCase","replace","Component"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;;AAEA,IAAMC,MAAMC,OAAOD,GAAnB;;AAEA;;AAEA,IAAME,SAASF,IAAIG,SAAJ,CAAcD,MAA7B;AACA,IAAME,cAAcJ,IAAIG,SAAJ,CAAcE,GAAlC;;AAEAL,IAAIG,SAAJ,CAAcE,GAAd,GAAoB,UAASC,EAAT,EAAa;AAC7B,QAAI,OAAOA,EAAP,KAAe,UAAnB,EAA+B;AAC3B,eAAO,IAAIP,QAAJ,CAAaO,EAAb,CAAP;AACH,KAFD,MAEO;AACH,eAAOF,YAAYG,KAAZ,CAAkBP,IAAIG,SAAtB,EAAiCK,SAAjC,CAAP;AACH;AACJ,CAND;;AAQAR,IAAIG,SAAJ,CAAcD,MAAd,GAAuB,YAAW;AAC9B,WAAOA,OAAOK,KAAP,CAAaP,IAAIG,SAAjB,EAA4BK,SAA5B,CAAP;AACH,CAFD;;AAIA;;AAEA,IAAMC,iBAAiBT,IAAIU,GAAJ,CAAQC,OAAR,CAAgBC,SAAhB,CAA0BC,MAAjD;;AAEAb,IAAIU,GAAJ,CAAQC,OAAR,CAAgBC,SAAhB,CAA0BC,MAA1B,GAAmC,UAASC,KAAT,EAAgB;AAC/C,QAAIA,SAASA,MAAMC,OAAnB,EAA4BD,MAAMC,OAAN;AAC5B,WAAON,eAAeF,KAAf,CAAqB,IAArB,EAA2BC,SAA3B,CAAP;AACH,CAHD;;AAKA;;AAEA,IAAMQ,wBAAwBhB,IAAIiB,MAAJ,CAAWL,SAAX,CAAqBM,OAAnD;;AAEAlB,IAAIiB,MAAJ,CAAWL,SAAX,CAAqBM,OAArB,GAA+B,UAASC,KAAT,EAAgBC,OAAhB,EAAyB;AACpD,WAAOJ,sBAAsBK,IAAtB,CAA2B,IAA3B,EAAiCF,MAAMG,WAAN,GAAoBC,OAApB,CAA4B,IAA5B,EAAkC,GAAlC,CAAjC,EAAyEH,OAAzE,CAAP;AACH,CAFD;;AAIA;;AAEA,IAAIpB,IAAIwB,SAAJ,CAAcZ,SAAd,CAAwBM,OAA5B,EAAqC;AACjClB,QAAIwB,SAAJ,CAAcZ,SAAd,CAAwBM,OAAxB,GAAkClB,IAAIiB,MAAJ,CAAWL,SAAX,CAAqBM,OAAvD;AACH","file":"overrides.js","sourcesContent":["import Template from './Template';\n\nconst Ext = window.Ext;\n\n// add support for functions that return JSX elements in place of XTemplates\n\nconst getTpl = Ext.XTemplate.getTpl;\nconst originalGet = Ext.XTemplate.get;\n\nExt.XTemplate.get = function(fn) {\n    if (typeof(fn) === 'function') {\n        return new Template(fn);\n    } else {\n        return originalGet.apply(Ext.XTemplate, arguments);\n    }\n}\n\nExt.XTemplate.getTpl = function() {\n    return getTpl.apply(Ext.XTemplate, arguments); \n}\n\n// automatically persist event before rippling\n\nconst originalRipple = Ext.dom.Element.prototype.ripple;\n\nExt.dom.Element.prototype.ripple = function(event) {\n    if (event && event.persist) event.persist();\n    return originalRipple.apply(this, arguments);\n} \n\n// enable component query by component name in Sencha Test\n\nconst originalWidgetIsXtype = Ext.Widget.prototype.isXType;\n\nExt.Widget.prototype.isXType = function(xtype, shallow) {\n    return originalWidgetIsXtype.call(this, xtype.toLowerCase().replace(/_/g, '-'), shallow);\n}\n\n// needed for classic\n\nif (Ext.Component.prototype.isXType) {\n    Ext.Component.prototype.isXType = Ext.Widget.prototype.isXType\n}"]}