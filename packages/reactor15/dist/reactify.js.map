{"version":3,"sources":["../src/reactify.js"],"names":["configure","reactify","Ext","window","classCache","settings","reactorSettings","result","targets","target","componentName","xtype","toLowerCase","replace","ClassManager","getByAlias","Error","className","$className","cached","name","config","debug","console","log","$createdByReactor","$reactorComponentName","ExtJSComponent","push","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAcgBA,S,GAAAA,S;QAcAC,Q,GAAAA,Q;;AA5BhB;;;;;;AAEA,IAAMC,MAAMC,OAAOD,GAAnB;;AAEA;AACA,IAAME,aAAa,EAAnB;;AAEA;AACA,IAAIC,WAAW,EAAf;;AAEA;;;;AAIO,SAASL,SAAT,CAAmBM,eAAnB,EAAoC;AACvCD,eAAWC,eAAX;AACH;;AAED;;;;;;;;;;AAUO,SAASL,QAAT,GAA8B;AACjC,QAAMM,SAAS,EAAf;;AADiC,sCAATC,OAAS;AAATA,eAAS;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,gBAGxBC,MAHwB;;AAI7B,gBAAIC,sBAAJ;;AAEA,gBAAI,OAAOD,MAAP,KAAmB,QAAvB,EAAiC;AAC7BC,gCAAgBD,MAAhB;AACA,oBAAME,QAAQF,OAAOG,WAAP,GAAqBC,OAArB,CAA6B,IAA7B,EAAmC,GAAnC,CAAd;AACAJ,yBAASP,IAAIY,YAAJ,CAAiBC,UAAjB,aAAsCJ,KAAtC,CAAT;AACA,oBAAI,CAACF,MAAL,EAAa,MAAM,IAAIO,KAAJ,sCAA6CL,KAA7C,kDAAN;AAChB;;AAED,gBAAMM,YAAYR,OAAOS,UAAzB;AACA,gBAAIC,SAASf,WAAWa,SAAX,CAAb;AACAP,4BAAgBA,iBAAiBU,IAAjC,CAf6B,CAeU;;AAEvC,gBAAI,CAACD,MAAL,EAAaA,SAASf,WAAWa,SAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yDAaGI,MAbH,EAaW;AACzB,4BAAIhB,SAASiB,KAAb,EAAoBC,QAAQC,GAAR,CAAY,QAAZ,EAAsBd,aAAtB,EAAqCW,MAArC;AACpB,4BAAMd,SAAS,IAAIE,MAAJ,CAAWY,MAAX,CAAf;AACAd,+BAAOkB,iBAAP,GAA2B,IAA3B;AACAlB,+BAAOmB,qBAAP,GAA+BhB,aAA/B;AACA,+BAAOH,MAAP;AACH;AAnBiB;AAAA;;AAClB;AACA;AACA;;AAHkB,wCAKD;AACb,+BAAOE,MAAP;AACH;AAPiB;AAAA;AAAA,wCASI;AAClB,+BAAOJ,QAAP;AACH;AAXiB;AAAA;AAAA,cAAsCsB,wBAAtC,CAAT;;AAsBbpB,mBAAOqB,IAAP,CAAYT,MAAZ;AAvC6B;;AAGjC,wDAAmBX,OAAnB,4GAA4B;AAAA;AAqC3B;AAxCgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0CjC,QAAIA,QAAQqB,MAAR,KAAmB,CAAvB,EAA0B;AACtB,eAAOtB,OAAO,CAAP,CAAP;AACH,KAFD,MAEO;AACH,eAAOA,MAAP;AACH;AACJ","file":"reactify.js","sourcesContent":["import ExtJSComponent from './ExtJSComponent';\n\nconst Ext = window.Ext;\n\n// map of Ext JS class name to reactified class\nconst classCache = {};\n\n// global reactor settings\nlet settings = {};\n\n/**\n * Store reactor settings from launch\n * @param {Object} reactorSettings \n */\nexport function configure(reactorSettings) {\n    settings = reactorSettings;\n}\n\n/**\n * Creates a react component for a given Ext JS component.\n *\n *  Single class example: const Grid = reactify('grid');\n *\n *  Multiple class example: const [ Grid, Panel ] = reactify('Grid', 'Panel');\n *\n * @param {String[]/Ext.Class[]} ...targets xtypes or instances of Ext.Class.\n * @returns {React.Component/React.Component[]} If a single argument is passed a single React.Component class is returned. If multiple arguments are passed, an array of React.Component classes is returned.\n */\nexport function reactify(...targets) {\n    const result = [];\n\n    for (let target of targets) {\n        let componentName;\n\n        if (typeof(target) === 'string') {\n            componentName = target;\n            const xtype = target.toLowerCase().replace(/_/g, '-')\n            target = Ext.ClassManager.getByAlias(`widget.${xtype}`);\n            if (!target) throw new Error(`No Ext JS component with xtype \"${xtype}\" found.  Perhaps you're missing a package?`);\n        }\n\n        const className = target.$className;\n        let cached = classCache[className];\n        componentName = componentName || name; // use the Ext JS class name for the node type in jest when reactifying a class directly\n\n        if (!cached) cached = classCache[className] = class extends ExtJSComponent {\n            // static get name() {\n            //     return componentName;\n            // }\n\n            get extJSClass() {\n                return target;\n            }\n\n            get reactorSettings() {\n                return settings;\n            }\n\n            createExtJSComponent(config) {\n                if (settings.debug) console.log('create', componentName, config);\n                const result = new target(config)\n                result.$createdByReactor = true;\n                result.$reactorComponentName = componentName;\n                return result;\n            }\n        };\n\n        result.push(cached);\n    }\n\n    if (targets.length === 1) {\n        return result[0];\n    } else {\n        return result;\n    }\n}"]}