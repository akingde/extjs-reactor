{"version":3,"sources":["../src/index.js"],"names":["reactify","default","launch","install","Ext","window","rootComponent","options","debug","viewport","appConfig","namespace","ReactDOM","application","name","Viewport","getRenderTarget","target","dom","render","style","document","createElement","innerHTML","head","appendChild","setAttribute","body","console","warn"],"mappings":";;;;;;;;;;;AAEA;;;;;yBAESA,Q;;;;;;;;;iDACAC,O;;;;;;;;;wDACAA,O;;;QAYOC,M,GAAAA,M;QAoDAC,O,GAAAA,O;;AAtEhB;;;;AACA;;;;AAOA,IAAMC,MAAMC,OAAOD,GAAnB;;AAEA;;;;;;;;AAQO,SAASF,MAAT,CAAgBI,aAAhB,EAA6F;AAAA,QAA9DC,OAA8D,uEAApD,EAAEC,OAAO,KAAT,EAAgBC,UAAU,KAA1B,EAAoD;AAAA,QAAjBC,SAAiB,uEAAL,EAAK;;AAChG,6BAAUH,OAAV;;AAEAH,QAAIO,SAAJ,CAAc,aAAd,EAA6BC,QAA7B,GAAwCA,kBAAxC,CAHgG,CAG9C;;AAElDR,QAAIS,WAAJ;AACIC,cAAM;AADV,OAEOJ,SAFP;AAGIR,gBAAQ,kBAAM;AACV,gBAAIE,IAAIW,QAAJ,IAAgBX,IAAIW,QAAJ,CAAaC,eAAjC,EAAkD;AAC9C;AACA,oBAAMC,SAASb,IAAIW,QAAJ,CAAaC,eAAb,GAA+BE,GAA9C;;AAEA,oBAAI,OAAOZ,aAAP,KAAyB,UAA7B,EAAyC;AACrCA,oCAAgBA,cAAcW,MAAd,CAAhB;AACH;;AAED,oBAAIX,aAAJ,EAAmB;AACfM,uCAASO,MAAT,CAAgBb,aAAhB,EAA+BW,MAA/B;AACH;AACJ,aAXD,MAWO;AACH;AACA,oBAAIV,QAAQE,QAAR,IAAoBH,aAAxB,EAAuC;AACnC,wBAAMc,QAAQC,SAASC,aAAT,CAAuB,OAAvB,CAAd;AACAF,0BAAMG,SAAN,GAAkB,mDAAlB;AACAF,6BAASG,IAAT,CAAcC,WAAd,CAA0BL,KAA1B;AACH;;AAED,oBAAMH,UAASI,SAASC,aAAT,CAAuB,KAAvB,CAAf;AACAL,wBAAOS,YAAP,CAAoB,gBAApB,EAAsC,IAAtC;AACAL,yBAASM,IAAT,CAAcF,WAAd,CAA0BR,OAA1B;;AAEA,oBAAI,OAAOX,aAAP,KAAyB,UAA7B,EAAyC;AACrCA,oCAAgBA,cAAcW,OAAd,CAAhB;AACH;;AAED,oBAAIX,aAAJ,EAAmB;AACfM,uCAASO,MAAT,CAAgBb,aAAhB,EAA+BW,OAA/B;AACH;AACJ;AACJ;AAnCL;AAqCH;;AAED;;;;;;;;AAQO,SAASd,OAAT,CAAiBI,OAAjB,EAA0B;AAC7B,QAAIA,QAAQE,QAAZ,EAAsB;AAClBmB,gBAAQC,IAAR,CAAa,qLAAb;AACH,KAFD,MAEO;AACHD,gBAAQC,IAAR,CAAa,6NAAb;AACH;;AAED3B,WAAO,IAAP,EAAaK,OAAb;AACH","file":"index.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport './overrides';\nimport { configure } from './reactify';\n\nexport { reactify } from './reactify';\nexport { default as Template } from './Template';\nexport { default as renderWhenReady } from './renderWhenReady';\n\nconst Ext = window.Ext;\n\n/**\n * Launches an ExtReact application, creating a viewport and rendering the specified root component into it.\n * @param {React.Component/Function} rootComponent You application's root component, or a function that returns the root component.\n * @param {Object} [options] Additional config parameters for reactor.\n * @param {Object} options.debug Set to true to show debug information in the console related to creating, updating, and destroying Ext JS components.\n * @param {Object} options.viewport  When using Ext JS classic, set to true to have the root component sized to the full height and width of the window.\n * @param {Object} [appConfig] Additional config parameters for Ext.application\n */\nexport function launch(rootComponent, options = { debug: false, viewport: false }, appConfig = { }) {\n    configure(options);\n\n    Ext.namespace('Ext.reactor').ReactDOM = ReactDOM; // needed for RendererCell and any other components that can render React elements;\n\n    Ext.application({\n        name: '$ExtReactApp',\n        ...appConfig,\n        launch: () => {\n            if (Ext.Viewport && Ext.Viewport.getRenderTarget) {\n                // modern, ext-react\n                const target = Ext.Viewport.getRenderTarget().dom;\n    \n                if (typeof rootComponent === 'function') {\n                    rootComponent = rootComponent(target);\n                }\n    \n                if (rootComponent) {\n                    ReactDOM.render(rootComponent, target);\n                }\n            } else {\n                // classic\n                if (options.viewport || rootComponent) {\n                    const style = document.createElement('style');\n                    style.innerHTML = 'html, body, div[data-reactroot] { height: 100%; }';\n                    document.head.appendChild(style);\n                }\n\n                const target = document.createElement('div');\n                target.setAttribute('data-reactroot', 'on');\n                document.body.appendChild(target);\n\n                if (typeof rootComponent === 'function') {\n                    rootComponent = rootComponent(target);\n                }\n\n                if (rootComponent) {\n                    ReactDOM.render(rootComponent, target);\n                }\n            }\n        }\n    });\n}\n\n/**\n * Configures React to resolve jsx tags.\n * @deprecated\n * @param {Object} options\n * @param {String} options.viewport When true, adds a stylesheet that mimics an Ext JS Viewport\n *  by setting the html, body, and react root element to height: 100%. Set this to true when using an\n *  Ext JS component at the root of your app.\n */\nexport function install(options) {\n    if (options.viewport) {\n        console.warn('[@extjs/reactor] Warning: install({ viewport: true }) is deprecated.  Use launch(<App/>) in place of Ext.onReady(() => ReactDOM.render(<App/>, document.getElementById(\\'root\\'))).')\n    } else {\n        console.warn('[@extjs/reactor] Warning: install() is deprecated.  Use launch(() => ReactDOM.render(<App/>, document.getElementById(\\'root\\'))) in place of Ext.onReady(() => ReactDOM.render(<App/>, document.getElementById(\\'root\\'))).')\n    }\n    \n    launch(null, options);\n};\n"]}